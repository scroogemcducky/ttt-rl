name: Build, Push, and Deploy Docker Image to ECS

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'


env:
  AWS_REGION: us-east-1
  DOCKER_HUB_REPO: ttt-rl-server
  # DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }} # Keep secret reference if needed below
  IMAGE_TAG: latest
  ECS_CLUSTER_NAME: ttt-rl-cluster
  ECS_SERVICE_NAME: ttt-rl-service
  ECS_TASK_DEFINITION_FAMILY: ttt-rl-task
  CONTAINER_NAME: ttt-rl-container

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      # Now reference the output from the new step below
      image_uri: ${{ steps.prep_image_uri.outputs.image_uri_output }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        # Reference the secret directly here where it's needed
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        # Reference the secret directly here too
        images: ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_HUB_REPO }}
        tags: |
          type=raw,value={{branch}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push multi-arch image
      uses: docker/build-push-action@v4
      with:
        context: ./server
        file: ./server/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # --- NEW STEP ---
    - name: Prepare image URI output for deployment job
      id: prep_image_uri
      run: |
        # Construct the specific URI we want to deploy
        # Use the secret directly within the step's execution context
        IMAGE_URI_VALUE="${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_HUB_REPO }}:${{ env.IMAGE_TAG }}"
        echo "image_uri_output=$IMAGE_URI_VALUE" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Download task definition template (if not in repo)
      run: |
        echo "Assuming server/task-definition.json exists..."

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: server/task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        # This input should now receive the correct, non-suppressed value
        image: ${{ needs.build-and-push.outputs.image_uri }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_NAME }}
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true