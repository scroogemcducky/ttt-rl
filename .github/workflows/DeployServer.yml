name: Build, Push, and Deploy Docker Image to ECS

on:
  push:
    branches: [ main ]
    paths:
      - 'server/**'


env:
  AWS_REGION: us-east-1 
  # ECR_REPOSITORY: ttt-rl-server 
  DOCKER_HUB_REPO: ttt-rl-server 
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  IMAGE_TAG: latest
  ECS_CLUSTER_NAME: ttt-rl-cluster
  ECS_SERVICE_NAME: ttt-rl-service
  ECS_TASK_DEFINITION_FAMILY: ttt-rl-task
  CONTAINER_NAME: ttt-rl-container

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.tags }} # Get tags from meta step

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up QEMU # Needed for building ARM on AMD runner
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      id: buildx # Give ID to buildx step
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ env.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}


    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.DOCKER_HUB_REPO }}
        tags: |
          type=raw,value={{branch}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push multi-arch image
      uses: docker/build-push-action@v4
      with:
        context: ./server
        file: ./server/Dockerfile
        platforms: linux/amd64,linux/arm64 # Build for both architectures
        push: true
        tags: ${{ steps.meta.outputs.tags }} # Use tags from meta step
        labels: ${{ steps.meta.outputs.labels }} # Use labels from meta step
        cache-from: type=gha # Optional: enable build cache
        cache-to: type=gha,mode=max # Optional: enable build cache


  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Assuming server/task-definition.json template file
    - name: Download task definition template (if not in repo)
      # Or better: commit a template file server/task-definition.json
      run: |
        echo "Assuming server/task-definition.json exists..."
        # Example download if needed (replace with your actual task def family):
        # aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} --query taskDefinition > server/task-definition.json
        # WARNING: Downloading overwrites. Manually creating a template is safer.

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: server/task-definition.json # Path to your task definition file template
        container-name: ${{ env.CONTAINER_NAME }} # Use env var
        image: ${{ needs.build-and-push.outputs.image }} # Get image name/tag from build job output

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_NAME }}
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true


